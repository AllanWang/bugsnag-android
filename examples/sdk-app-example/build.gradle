buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agpVersion"
        classpath 'com.bugsnag:bugsnag-android-gradle-plugin:3.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

repositories {
    google()
    mavenCentral()
    jcenter()
}

android {
    signingConfigs {
        config {
            keyAlias 'password'
            keyPassword 'password'
            storeFile file('../../features/fixtures/fakekeys.jks')
            storePassword 'password'
        }
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.config
        ndk {
            // NOTE: remove armeabi if testing on NDK r17+
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'armeabi', 'x86', 'x86_64'
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
            signingConfig signingConfigs.config
        }
    }
    flavorDimensions "regular"
    productFlavors {
        javaExample {
            applicationIdSuffix ".java"
            signingConfig signingConfigs.config
        }
        kotlinExample {
            applicationIdSuffix ".kotlin"
            signingConfig signingConfigs.config
        }
    }
    lintOptions {
        disable 'OnClick'
        abortOnError true
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

dependencies {
    implementation 'com.bugsnag:bugsnag-android-ndk:4.9.2'
    // If developing locally, replace the above line with the following:
    // implementation project(path: ':sdk', configuration: 'default')
    // api project(path: ':ndk', configuration: 'default')
    implementation 'com.android.support:appcompat-v7:27.0.0'
    implementation 'com.android.support:support-v4:27.0.0'
    kotlinExampleImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    androidTestImplementation "com.android.support.test:runner:0.5", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test:rules:0.5", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:2.2.2", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

apply plugin: 'com.bugsnag.android.gradle'
bugsnag {
    ndk true
}
apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "6.16"
}
task("checkstyle", type: Checkstyle) {
    configFile rootProject.file("config/checkstyle/checkstyle.xml")
    source "src/javaExample/java"
    include "**/*.java"
    classpath = files()
}

// Local development settings. Uncomment these if referencing
// local dependencies:
//assemble.dependsOn ":ndk:assemble"
///**
// * Gradle configuration for unpacking native API for CMake. Only required
// * when building against local artifacts.
// */
//import org.gradle.api.DefaultTask
//import org.gradle.api.tasks.TaskAction
//
//class BugsnagTestNdkSetupTask extends DefaultTask {
//
//    @TaskAction
//    void setupNdkProject() {
//        def artifactFile = findBugsnagNdkArchive()
//        File dst = new File(project.buildDir, "/intermediates/bugsnag-libs")
//
//        project.copy {
//            from project.zipTree(artifactFile)
//            into(project.file(dst))
//        }
//    }
//
//    File findBugsnagNdkArchive() {
//        for (def config in project.configurations) {
//            try {
//                def artifactFile = config.resolvedConfiguration.getFiles().find {
//                    it.toString().contains("bugsnag-android-ndk")
//                }
//                if (artifactFile && artifactFile.exists()) {
//                    return artifactFile
//                }
//            } catch (Exception e) {} // some configurations cannot be directly resolved
//        }
//        throw new Exception("SOLUTION: The bugsnag-android-ndk file was not found, please run `./gradlew ndk:assembleRelease`")
//    }
//}
//
//project.afterEvaluate {
//    def cleanTasks = project.tasks.findAll {
//        it.name.startsWith("externalNative") && it.name.contains("Clean")
//    }
//    def buildTasks = project.tasks.findAll {
//        it.name.startsWith("externalNative") && it.name.contains("Build") && !it.name.contains("Clean")
//    }
//
//    def ndkSetupTask = project.tasks.create("bugsnagInstallAllJniLibsTask", BugsnagTestNdkSetupTask)
//
//    buildTasks.forEach {
//        ndkSetupTask.mustRunAfter(cleanTasks)
//        it.dependsOn ndkSetupTask
//        it.doFirst { ndkSetupTask }
//    }
//}
