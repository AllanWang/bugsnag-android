
// Local development settings. Uncomment these if referencing
// local dependencies:
assemble.dependsOn ":ndk:assemble"
/**
 * Gradle configuration for unpacking native API for CMake. Only required
 * when building against local artifacts.
 */
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

class BugsnagTestNdkSetupTask extends DefaultTask {

    @TaskAction
    void setupNdkProject() {
        def artifactFile = findBugsnagNdkArchive()
        File dst = new File(project.buildDir, "/intermediates/bugsnag-libs")

        project.copy {
            from project.zipTree(artifactFile)
            into(project.file(dst))
        }
    }

    File findBugsnagNdkArchive() {
        for (def config in project.configurations) {
            try {
                def artifactFile = config.resolvedConfiguration.getFiles().find {
                    it.toString().contains("bugsnag-android-ndk")
                }
                if (artifactFile && artifactFile.exists()) {
                    return artifactFile
                }
            } catch (Exception e) {} // some configurations cannot be directly resolved
        }
        throw new Exception("SOLUTION: The bugsnag-android-ndk file was not found, please run `./gradlew ndk:assembleRelease`")
    }
}

project.afterEvaluate {
    def cleanTasks = project.tasks.findAll {
        it.name.startsWith("externalNative") && it.name.contains("Clean")
    }
    def buildTasks = project.tasks.findAll {
        it.name.startsWith("externalNative") && it.name.contains("Build") && !it.name.contains("Clean")
    }

    def ndkSetupTask = project.tasks.create("bugsnagInstallAllJniLibsTask", BugsnagTestNdkSetupTask)

    buildTasks.forEach {
        ndkSetupTask.mustRunAfter(cleanTasks)
        it.dependsOn ndkSetupTask
        it.doFirst { ndkSetupTask }
    }
}
